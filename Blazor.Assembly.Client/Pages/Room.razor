@page "/room/{RoomName}/{RoomId}"

<PageTitle>Room</PageTitle>

@using Blazor.Assembly.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Orleans.Interfaces.Models
@using System.Globalization
@inject NavigationManager NavigationManager
@inject SessionStorageService SessionStorageService
@inject HubConnectionFactoryService HubConnectionFactoryService

<h3>Chat Room: @RoomName</h3>

@if (ErrorMessage != null)
{
    <p style="color: red">@ErrorMessage</p>
}

<div style="position: absolute">
    <h4>Chat Users :</h4>
    @foreach (var user in Users)
    {
        <div>
            <strong>@user</strong>
        </div>
    }
</div>

<div class="chat-container">
    <button class="load-older" @onclick="LoadOlderMessages">Load Older Messages</button>
    <div class="chat-messages">
        @foreach (var message in Messages)
        {
            <div class="message">
                <span class="timestamp">@message.CreatedAt.ToString("dd.MM | HH:mm", CultureInfo.InvariantCulture)</span>
                <strong class="username">@message.Sender:</strong> @message.Message
            </div>
        }
    </div>
    <div class="chat-input">
        <input @bind="NewMessage" placeholder="Type your message..." />
        <button @onclick="SendMessage">Send</button>
    </div>

    <div>
        <button style="color: red" @onclick="LeaveRoom">Leave Room</button>
    </div>
</div>
@code {
    [Parameter] public string RoomName { get; set; } = default!;
    [Parameter] public string RoomId { get; set; } = default;
    private HubConnection? HubConnection;
    private List<ChatMessage> Messages = new();
    private HashSet<string> Users = new();
    private string NewMessage = string.Empty;
    private string? ErrorMessage;
    private int MessageCount = 30;
    private string Username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Username = await SessionStorageService.GetItemAsync("Username");

        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(RoomId))
        {
            NavigationManager.NavigateTo($"/");
        }

        HubConnection = await HubConnectionFactoryService.CreateAsync(RoomName);

        HubConnection.On<ChatMessage>("ReceiveMessage", (message) =>
        {
            Messages.Add(message);
            StateHasChanged();
        });

        if (HubConnection.State == HubConnectionState.Disconnected)
        {

            await HubConnection.StartAsync();
        }

        Messages = await HubConnection.InvokeAsync<List<ChatMessage>>("GetRoomMessages", RoomId);
        Users = await HubConnection.InvokeAsync<HashSet<string>>("GetRoomUsers", RoomId);

        if (!Users.Contains(Username))
        {
            NavigationManager.NavigateTo($"/chatrooms");
        }
    }

    private async Task LoadOlderMessages()
    {

        var olderMessages = await HubConnection.InvokeAsync<List<ChatMessage>>("LoadOlderMessages", RoomId, MessageCount, 50);
        MessageCount += 50;

        Messages.InsertRange(0, olderMessages);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessage))
        {
            return;
        }

        await HubConnection.SendAsync("SendMessage", RoomId, Username, NewMessage);

        NewMessage = string.Empty;
    }

    private async Task LeaveRoom(MouseEventArgs e)
    {
        ErrorMessage = string.Empty;

        var isRemoved = await HubConnection.InvokeAsync<bool>("RemoveUserFromRoom", RoomId, Username);

        if (!isRemoved)
        {
            ErrorMessage = $"User : {Username} had already left the room.";
            return;
        }

        Users.Remove(Username);
        Username = string.Empty;
        MessageCount = 30;

        NavigationManager.NavigateTo($"/chatrooms");
    }
}