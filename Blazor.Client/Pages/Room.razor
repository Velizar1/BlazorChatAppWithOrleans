@page "/room/{RoomName}/{RoomId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@using Orleans.Interfaces.IGrains
@using Orleans.Interfaces.Models
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject HubConnection HubConnection
@inject IClusterClient clusterClient

<h3>Chat Room: @RoomName</h3>

@if (ErrorMessage != null)
{
    <p style="color: red">@ErrorMessage</p>
}

<ul>
    @foreach (var message in Messages)
    {
        <p>Send at : @message.CreatedAt.ToString("dd.MM:hh.mm")</p>
        <li>@message.Sender: @message.Message</li>
    }
</ul>

<div>
    <textarea @bind="NewMessage"></textarea>
    <button @onclick="SendMessage">Send</button>
    <button @onclick="LoadOlderMessages">Load Older Messages</button>
</div>

<div>
    <button style="color: red" @onclick="LeaveRoom">Leave Room</button>
</div>

@code {
    [Parameter] public string RoomName { get; set; } = default!;
    [Parameter] public Guid? RoomId { get; set; } = default;
    private List<ChatMessage> Messages = new();
    private List<string> Users = new();
    private string NewMessage = string.Empty;
    private string? ErrorMessage;
    private int MessageCount = 30;
    private string Username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Username = await localStorage.GetItemAsync<string>("Username");

        if (string.IsNullOrWhiteSpace(Username) || RoomId == null)
        {
            NavigationManager.NavigateTo($"/");
        }

        if (HubConnection.State == HubConnectionState.Disconnected)
        {

            HubConnection.On<ChatMessage>("ReceiveMessage", (message) =>
            {
                Messages.Add(message);
                StateHasChanged();
            });

            await HubConnection.StartAsync();

            Messages = await HubConnection.InvokeAsync<List<ChatMessage>>("GeRoomMessages", RoomName, MessageCount);
            Users = await HubConnection.InvokeAsync<List<string>>("GetChatUsers", RoomName);
        }
    }

    private async Task LoadOlderMessages()
    {
        var chatRoom = clusterClient.GetGrain<IChatRoomGrain>((Guid)RoomId!);
        var olderMessages = await chatRoom.LoadOlderMessages(MessageCount, 50);
        MessageCount += 50;

        Messages.InsertRange(0, olderMessages);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessage))
        {
            return;
        }

        await HubConnection!.SendAsync("SendMessage", RoomId, RoomName, Username, NewMessage);
        NewMessage = string.Empty;
    }

    public async Task LeaveRoom(MouseEventArgs e)
    {
        var chatRoom = clusterClient.GetGrain<IChatRoomGrain>((Guid)RoomId!);
        var isRemoved = await chatRoom.RemoveUserFromChatRoom(Username);

        if (!isRemoved)
        {
            ErrorMessage = $"User : {Username} had already left the room.";
            return;
        }

        Users.Remove(Username);
        Username = string.Empty;

        await HubConnection!.SendAsync("RemoveUserFromRoom", RoomName, Username);
        NavigationManager.NavigateTo($"/chatrooms");
    }
}