@page "/room/{RoomName}/{RoomId}"

@using Blazored.LocalStorage
@using Orleans.Interfaces.IGrains
@using Orleans.Interfaces.Models
@using System.Globalization
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IClusterClient clusterClient

<h3>Chat Room: @RoomName</h3>

@if (ErrorMessage != null)
{
    <p style="color: red">@ErrorMessage</p>
}

<div >
    @foreach (var user in Users)
    {
        <div class="user">
            <strong>@user</strong>
        </div>
    }
</div>

<div class="chat-container">
    <button class="load-older" @onclick="LoadOlderMessages">Load Older Messages</button>
    <div class="chat-messages">
        @foreach (var message in Messages)
        {
            <div class="message">
                <span class="timestamp">@message.CreatedAt.ToString("dd.MM | HH:mm", CultureInfo.InvariantCulture)</span>
                <strong class="username">@message.Sender:</strong> @message.Message
            </div>
        }
    </div>
    <div class="chat-input">
        <input @bind="NewMessage" placeholder="Type your message..." />
        <button @onclick="SendMessage">Send</button>
    </div>

    <div>
        <button style="color: red" @onclick="LeaveRoom">Leave Room</button>
    </div>
</div>
@code {
    [Parameter] public string RoomName { get; set; } = default!;
    [Parameter] public string RoomId { get; set; } = default;
    //private HubConnection? hubConnection;
    private List<ChatMessage> Messages = new();
    private HashSet<string> Users = new();
    private string NewMessage = string.Empty;
    private string? ErrorMessage;
    private int MessageCount = 30;
    private string Username = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // hubConnection = new HubConnectionBuilder()
        //         .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub")) Path to your SignalR hub
        //         .Build();

        Username = await localStorage.GetItemAsync<string>("Username");

        if (string.IsNullOrWhiteSpace(Username) || RoomId == null)
        {
            NavigationManager.NavigateTo($"/");
        }

        // if (hubConnection.State == HubConnectionState.Disconnected)
        // {

        //     hubConnection.On<ChatMessage>("ReceiveMessage", (message) =>
        //     {
        //         Messages.Add(message);
        //         StateHasChanged();
        //     });

        //     await hubConnection.StartAsync();


        // }
        var chatRoom = clusterClient.GetGrain<IChatRoomGrain>(Guid.Parse(RoomId));
        Messages = await chatRoom.GetMessages();
        Users = await chatRoom.GetUsers();
    }

    private async Task LoadOlderMessages()
    {
        var chatRoom = clusterClient.GetGrain<IChatRoomGrain>(Guid.Parse(RoomId));
        var olderMessages = await chatRoom.LoadOlderMessages(MessageCount, 50);
        MessageCount += 50;

        Messages.InsertRange(0, olderMessages);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessage))
        {
            return;
        }
        var chatRoom = clusterClient.GetGrain<IChatRoomGrain>(Guid.Parse(RoomId));

        var chatMessage = new ChatMessage
            {
                CreatedAt = DateTime.Now,
                Message = NewMessage,
                Sender = Username,
            };

        var isSent = await chatRoom.SendMessage(chatMessage);
        Messages.Add(chatMessage);
        StateHasChanged();
        //await hubConnection!.SendAsync("SendMessage", RoomId, RoomName, Username, NewMessage);
        NewMessage = string.Empty;
    }

    public async Task LeaveRoom(MouseEventArgs e)
    {
        var chatRoom = clusterClient.GetGrain<IChatRoomGrain>(Guid.Parse(RoomId));
        var isRemoved = await chatRoom.RemoveUserFromChatRoom(Username);

        if (!isRemoved)
        {
            ErrorMessage = $"User : {Username} had already left the room.";
            return;
        }

        Users.Remove(Username);
        Username = string.Empty;

        //await hubConnection!.SendAsync("RemoveUserFromRoom", RoomName, Username);
        NavigationManager.NavigateTo($"/chatrooms");
    }
}